id: test
namespace: ncaa_project

inputs:
- id: table
  type: SELECT
  displayName: Select which table to load to dataset on BigQuery
  values: [
          "team_colors"
          ]
  defaults: team_colors
  allowCustomValue: false

pluginDefaults:
  - type: io.kestra.plugin.gcp
    values:
      projectId: "{{kv('GCP_PROJECT_ID')}}"
      bucket: "{{kv('GCP_BUCKET_NAME')}}"

tasks:
  - id: if_team_colors
    type: io.kestra.plugin.core.flow.If
    condition: "{{inputs.table == 'team_colors'}}"
    then:
      - id: bq_ncaa_team_colors_create_table
        serviceAccount: "{{kv('GCP_ACCOUNT')}}"
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE TABLE IF NOT EXISTS {{ kv('GCP_PROJECT_ID') }}.{{ kv('GCP_DATASET') }}.ncaa_team_colors_alt
            (
              market STRING OPTIONS (description = 'Market of the team'),
              id STRING OPTIONS (description = 'Unique ID for the team'),
              code_ncaa INTEGER OPTIONS (description = 'NCAA code for the team'),
              color STRING OPTIONS (description = 'Color of the team')
            )
      
      - id: list_files_gcs
        type: io.kestra.plugin.gcp.gcs.List
        from: "gs://{{kv('GCP_BUCKET_NAME')}}/{{inputs.table}}/"
        serviceAccount: "{{kv('GCP_ACCOUNT')}}"

      - id: process_gcs_part
        type: io.kestra.plugin.core.flow.ForEach
        values: "{{outputs.list_files_gcs.blobs}}"
        concurrencyLimit: 1
        tasks:
          - id: debug_item_value
            type: io.kestra.plugin.core.log.Log
            message: "Current taskrun.value: {{ taskrun.value | json(indent=2) }}"
          - id: download_zip
            type: io.kestra.plugin.gcp.gcs.Download
            from: "{{taskrun.value.blobs.0.uri}}"
            serviceAccount: "{{kv('GCP_ACCOUNT')}}"

          - id: unzip_files
            type: io.kestra.plugin.compress.ArchiveDecompress
            algorithm: ZIP
            from: "{{outputs.download_zip.uri}}"

      - id: load_to_bigquery
        type: io.kestra.plugin.gcp.bigquery.Load
        serviceAccount: "{{ kv('GCP_ACCOUNT') }}"
        from: "{{ outputs.download_and_unzip_parts.tasks[*].outputs.unzip_files.files }}"
        format: CSV
        csvOptions:
          fieldDelimiter: ","
          skipLeadingRows: 1
        destinationTable: "{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.ncaa_team_colors_alt"
        writeDisposition: WRITE_APPEND
        createDisposition: CREATE_NEVER